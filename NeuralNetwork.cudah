class Network {
    public:
        // Threads per block on a 2060S
        int THREADSPERBLOCK = 1024;
        // If the network is loaded onto the GPU.
        bool loaded = false;
        // The values of the neural network
        float * values = 0;
        // All the biases
        float * biases = 0;
        // All the weights
        float * weights = 0;
        // The dimensions of the network, neurons per layer array.
        int * dims = 0;
        // The amount of weights per layer
        int * weightDims = 0;
        // The amount of neurons before a layer summed up.
        int * sumDims = 0;
        // The amount of weights before a layer summer up.
        int * sumWeights = 0;
        // The amount of layers.
        int dimsLength = 0;
        // Total amount of neurons.
        int totalNNSize = 0;
        // Total amount of weights.
        int totalWeights = 0;
        // The learning rate of the network
        float learningRate = 0;
        float * deltaBiases = 0;
        float * deltaWeights = 0;

        // The values on the device
        float * deviceValues = 0;
        // The biases on the GPU
        float * deviceBiases = 0;
        // The changes that need to be made to the biases
        float * deviceDeltaBiases = 0;
        // The weights on the GPU
        float * deviceWeights = 0;
        // The changes that need to be made to the weights
        float * deviceDeltaWeights = 0;
        // The dims on the GPU
        int * deviceDims = 0;
        // The sumDims on the GPU.
        int * deviceSumDims = 0;
        // The sumWeights on the GPU.
        int * deviceSumWeights = 0;

        // Reads the network from a file.
        Network();
        // Creates a new network, dimsLen is the amount of layers, neuronCountList is an array with the amount of neurons per layer.
        // Even though this could probably be made to run faster, this is branchless and clear.
        Network(int dimsLen, int * neuronCountList, float learningRate);
        // Initializes all the variables that aren't in the constructor, also used in read();
        void initAll();
        float lazyLog(float num);
        // Randomizes all the weights and biases
        void randomize();
        // Loads the needed files to the GPU, preparing for a feedforward.
        void loadNetworkToGPU();
        // Do the feedforward on the GPU
        float * feedForwardGPU(float input[]);
        // Do the feedforward on the CPU
        float * feedForwardCPU(float input[]);
        // Does all of backProp on the GPU
        void backPropGPU(float expected[], float * result);
        // Backpropogates on the CPU
        void backpropogateCPU(float expected[], float * result);
        // Gets the changes that need to be made to the network on the CPU.
        void getBackPropDeltasCPU(float expected[], float * result);
        // Unload the memory from the GPU.
        void unloadNetworkFromGPU();
        // Delete the network from memory.
        ~Network();
        // Print the network to console (Mostly used for debugging)
        void print();
        // Save the network to a file.
        void save();
        // Read the network from a file.
        void read();
};
